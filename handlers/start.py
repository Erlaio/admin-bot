from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from loader import dp
from keyboard.default.start_buttons import choice, agreement, gender, photo, universal_choice
from states.start_state import StartState
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import ReplyKeyboardRemove


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    text = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã \n–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç "–®–∫–æ–ª–∞ IT". –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç' \
           '–ø—Ä–æ—á–µ—Å—Ç—å –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –Ω–∏–º–∏ :)'
    await message.answer(text, reply_markup=choice)
    await StartState.rules.set()


@dp.message_handler(state=StartState.rules)
async def reading_rules(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ ü§ì':
        await message.answer('–¢—É—Ç –≥–æ–≤–æ—Ä–∏—Ç—Å—è –æ –ø—Ä–∞–≤–∏–ª–∞—Ö.', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏?', reply_markup=agreement)
        await StartState.decision.set()
    elif answer == '–Ø –Ω–µ –±—É–¥—É —á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ üòê':
        await message.answer('–û—á–µ–Ω—å –∂–∞–ª—å —á—Ç–æ –Ω–∞—à–µ —Å —Ç–æ–±–æ–π –æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É üòî\n–ï—Å–ª–∏ –∂–µ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å,'
                             '—Ç–æ —è –≤—Å–µ–≥–¥–∞ —Ç—É—Ç)) –ù—É–∂–Ω–æ –ª–∏—à—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start',
                             reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.rules.set()


@dp.message_handler(state=StartState.decision)
async def decision_about_rules(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ üòé':
        await message.answer('–•–æ—Ä–æ—à–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ üîé',
                             reply_markup=ReplyKeyboardRemove())
        await message.answer('–°—É–ø–µ—Ä! –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É! –¢–µ–ø–µ—Ä—å –∑–∞–π–º–µ–º—Å—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∞–Ω–∫–µ—Ç—ã üìù')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û üñä')
        await StartState.gender.set()
    elif answer == '–Ø –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ ü§î':
        await message.answer('–ñ–∞–ª—å, —á—Ç–æ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–∏ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞ üòî\n–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –º–æ–∂–µ—Ç–µ'
                             '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start', reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.decision.set()


@dp.message_handler(state=StartState.gender)
async def get_user_gender(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(name=answer)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª', reply_markup=gender)
    await StartState.photo.set()


@dp.message_handler(state=StartState.photo)
async def ask_about_photo(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ú—É–∂—Å–∫–æ–π üë®':
        await state.update_data(gender='–ú—É–∂—Å–∫–æ–π')
        await message.answer('–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–µ —Ñ–æ—Ç–æ?', reply_markup=photo)
        await StartState.decision_about_photo.set()
    elif answer == '–ñ–µ–Ω—Å–∫–∏–π üë©‚Äçü¶∞':
        await state.update_data(gender='–ñ–µ–Ω—Å–∫–∏–π')
        await message.answer('–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–µ —Ñ–æ—Ç–æ?', reply_markup=photo)
        await StartState.decision_about_photo.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.photo.set()


@dp.message_handler(state=StartState.decision_about_photo)
async def decision_about_photo(message: types.Message):
    answer = message.text
    if answer == '–î–∞! –•–æ—á—É –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—é —Ñ–æ—Ç–æ—á–∫—É üòé':
        await message.answer('–°—É–ø–µ—Ä!', reply_markup=ReplyKeyboardRemove())
        await StartState.upload_photo.set()
    elif answer == '–ù–µ—Ç, –Ω–µ –±—É–¥—É –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–≤–æ–µ —Ñ–æ—Ç–æ üôÇ':
        await message.answer('–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üìù', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É üìß')
        await StartState.gitlab.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.decision_about_photo.set()


@dp.message_handler(state=StartState.upload_photo)
async def upload_photo(message: types.Message):
    pass


@dp.message_handler(state=StartState.gitlab)
async def get_gitlab(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(email=answer)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –Ω–∞ gitlab üåê')
    await StartState.design.set()


@dp.message_handler(state=StartState.design)
async def design(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(gitlab=answer)
    await message.answer('–í—ã –¥–∏–∑–∞–π–Ω–µ—Ä? üé®', reply_markup=universal_choice)
    await StartState.decision_about_design.set()


@dp.message_handler(state=StartState.decision_about_design)
async def decision_about_design(message: types.Message):
    answer = message.text
    if answer == '–î–∞ ‚úÖ':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –Ω–∞ –±–µ—Ö–∞–Ω—Å üåê', reply_markup=ReplyKeyboardRemove())
        await StartState.get_skills.set()
    elif answer == '–ù–µ—Ç ‚ùå':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ üí™', reply_markup=ReplyKeyboardRemove())
        await StartState.aims.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.decision_about_design.set()


@dp.message_handler(state=StartState.get_skills)
async def get_skills(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(behance=answer)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ üí™')
    await StartState.aims.set()


@dp.message_handler(state=StartState.aims)
async def get_aims(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(skills=answer)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏ üéØ')
    await StartState.finish_questions.set()


@dp.message_handler(state=StartState.finish_questions)
async def finish_questions(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(aims=answer)
    await message.answer('–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∫–∞ –µ–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω')
