import imghdr
import os.path
import typing
from pathlib import PurePath
import time

from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import ReplyKeyboardRemove, ContentType

from keyboard.default import button_value
from keyboard.default.button_value import ButtonValue as button
from keyboard.default.keyboard import *
from loader import dp, bot
from pkg.db.models.user import new_user
from pkg.db.user_func import add_new_user, update_user_by_telegram_id, get_user_by_tg_login, delete_user_by_tg_id, \
    get_user_by_tg_id, update_user_status
from pkg.settings import settings
from states.start_state import StartState
from utils.config_utils import ConfigUtils
from utils.context_helper import ContextHelper


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    text = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã \n–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç "–®–∫–æ–ª–∞ IT". –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç ' \
           '–ø—Ä–æ—á–µ—Å—Ç—å –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –Ω–∏–º–∏ :)'
    await message.answer(text, reply_markup=ChoiceKeyboard.CHOICE)
    await StartState.rules.set()


@dp.message_handler(state=StartState.rules)
async def reading_rules(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == button.READ_RULES:
        rules = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –®–∫–æ–ª–µ IT!' \
                '\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å—à–µ, –Ω—É–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –®–∫–æ–ª—ã:\n\n' \
                "1. –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏.\n" \
                "–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É —Å 19:00 - 20:00 –ø—Ä–æ—Ö–æ–¥—è—Ç –æ—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –∂–∏—Ç–µ–ª–µ–π –ú–æ—Å–∫–≤—ã, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–æ, –≤ –¥–µ—Å—è—Ç–∏" \
                ' –º–∏–Ω—É—Ç–∞—Ö –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ "–î–µ–ª–æ–≤–æ–π —Ü–µ–Ω—Ç—Ä".' \
                '–î–ª—è –∂–∏—Ç–µ–ª–µ–π –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤, –≤—Å—Ç—Ä–µ—á–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —É–¥–∞–ª—ë–Ω–Ω–æ' \
                ' (–Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–≤–æ–Ω–∫—É –≤ –æ–±—â–µ–π –±–µ—Å–µ–¥–µ "–®–∫–æ–ª–∞ IT")\n\n' \
                '2. –õ–∏—á–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏.\n' \
                '–ü—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –®–∫–æ–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ª–∏—á–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–π –±–µ—Å–µ–¥–µ –≤' \
                ' —ç—Ç–æ–º —á–∞—Ç–µ.\n\n' \
                '3. –î–µ–¥–ª–∞–π–Ω—ã\n' \
                '–í –®–∫–æ–ª–µ –≤–≤–µ–¥–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–¥–æ–≥–æ–≤–æ—Ä–æ–≤.' \
                '–ó–∞ –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞—Ç—É.' \
                '–ü–µ—Ä–µ–Ω–æ—Å—ã –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è —Å —Ç–∏–º–ª–∏–¥–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.' \
                '–ü—Ä–∏–º–µ—Ä: –¥–µ–¥–ª–∞–π–Ω –Ω–∞ –∑–∞–¥–∞—á—É 18.07, –ø–µ—Ä–µ–¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –Ω–∞ –ø–æ –Ω–µ–π –º–æ–∂–Ω–æ –Ω–µ –ø–æ–∑–∂–µ 17.07.'
        await message.answer(rules, reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏?', reply_markup=AgreementKeyboard.AGREEMENT)
        await StartState.decision.set()
    elif answer == button.DONT_READ_RULES:
        await message.answer('–û—á–µ–Ω—å –∂–∞–ª—å —á—Ç–æ –Ω–∞—à–µ —Å —Ç–æ–±–æ–π –æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É üòî\n–ï—Å–ª–∏ –∂–µ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å,'
                             '—Ç–æ —è –≤—Å–µ–≥–¥–∞ —Ç—É—Ç)) –ù—É–∂–Ω–æ –ª–∏—à—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start',
                             reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.rules.set()


@dp.message_handler(state=StartState.decision)
async def decision_about_rules(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == button.AGREE_WITH_RULES:
        if get_user_by_tg_id(tg_id=message.from_user.id) is None:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û üñä', reply_markup=ReplyKeyboardRemove())
            await StartState.gender.set()
        else:
            await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?',
                                 reply_markup=YesNoKeyboard.KEYBOARD)
            await StartState.update_info.set()
    elif answer == button.DONT_AGREE_WITH_RULES:
        await message.answer('–ñ–∞–ª—å, —á—Ç–æ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–∏ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞ üòî\n–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –º–æ–∂–µ—Ç–µ'
                             '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start', reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.decision.set()


@dp.message_handler(state=StartState.update_info)
async def update_info(message: types.Message):
    answer = message.text
    if answer == button.YES:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û üñä', reply_markup=ReplyKeyboardRemove())
        tg_id = message.from_user.id
        delete_user_by_tg_id(telegram_id=tg_id)
        await StartState.gender.set()
    elif answer == button.NO:
        await message.answer('–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –í–∞—à—É –∞–Ω–∫–µ—Ç—É?', reply_markup=YesNoKeyboard.KEYBOARD)
        await StartState.choise.set()


@dp.message_handler(state=StartState.choise)
async def choise(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == button.YES:
        await message.answer('–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=CheckAccessKeyboard.KEYBOARD)
        await StartState.check_questionnaire.set()
    elif answer == button.NO:
        await message.answer('–û–∫. –í–æ–∑–≤—Ä–∞—â–∞—é –í–∞—Å –≤ –Ω–∞—á–∞–ª–æ', reply_markup=ReplyKeyboardRemove())
        await state.reset_state()


@dp.message_handler(state=StartState.gender)
async def get_user_gender(message: types.Message, state: FSMContext):
    answer = message.text
    splitted_full_name = answer.split(" ")
    user = new_user()
    user.telegram_id = message.from_user.id
    user.tg_login = f"@{message.from_user.username}"
    user.surname = splitted_full_name[0]
    try:
        user.name = splitted_full_name[1]
    except IndexError:
        user.name = ""
    try:
        user.patronymic = splitted_full_name[2]
    except IndexError:
        user.patronymic = ""
    add_new_user(user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª', reply_markup=GenderKeyboard.KEYBOARD)
    await StartState.photo.set()


@dp.message_handler(state=StartState.photo)
async def ask_about_photo(message: types.Message, state: FSMContext):
    answer = message.text
    message_text = '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–µ —Ñ–æ—Ç–æ?'
    reply_markup = PhotoKeyboard.KEYBOARD
    user = await ContextHelper.get_user(state)
    if answer == button.MALE_GENDER:
        user.gender = "–ú—É–∂—Å–∫–æ–π"
        update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer(message_text, reply_markup=reply_markup)
        await StartState.decision_about_photo.set()
    elif answer == button.FEMALE_GENDER:
        user.gender = "–ñ–µ–Ω—Å–∫–∏–π"
        update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer(message_text, reply_markup=reply_markup)
        await StartState.decision_about_photo.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.photo.set()


@dp.message_handler(state=StartState.decision_about_photo)
async def decision_about_photo(message: types.Message):
    answer = message.text
    if answer == button.WANT_UPLOAD_PHOTO:
        await message.answer('–°—É–ø–µ—Ä! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ.', reply_markup=ReplyKeyboardRemove())
        await StartState.upload_photo.set()
    elif answer == button.DONT_WANT_UPLOAD_PHOTO:
        await message.answer('–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üìù', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É üìß')
        await StartState.gitlab.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.decision_about_photo.set()


@dp.message_handler(state=StartState.upload_photo, content_types=[ContentType.PHOTO, ContentType.DOCUMENT])
async def upload_photo(message: types.Message, state: FSMContext):
    timestamp = str(time.time()).replace(".", "")
    file_name = f"photo_{timestamp}.jpg"
    file_path = os.path.join(ConfigUtils.get_temp_path(), file_name)
    user = await ContextHelper.get_user(state)
    if not message.content_type == 'photo':
        file = await bot.get_file(message.document.file_id)
        await bot.download_file(file.file_path, file_path)
    else:
        await message.photo[-1].download(destination_file=file_path)
    with open(file_path, 'rb') as file:
        if not imghdr.what(file):
            await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            await StartState.upload_photo.set()
        else:
            user.photo = file.read()
            update_user_by_telegram_id(message.from_user.id, user)
            await ContextHelper.add_user(user, state)
            await message.answer('–°–ø–∞—Å–∏–±–æ!')
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É üìß')
            await StartState.gitlab.set()
    if os.path.exists(file_path):
        os.remove(file_path)


@dp.message_handler(state=StartState.gitlab)
async def get_gitlab(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.email = answer
    update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –Ω–∞ gitlab üåê')
    await StartState.design.set()


@dp.message_handler(state=StartState.design)
async def design(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.git = answer
    update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í—ã –¥–∏–∑–∞–π–Ω–µ—Ä? üé®', reply_markup=YesNoKeyboard.KEYBOARD)
    await StartState.decision_about_design.set()


@dp.message_handler(state=StartState.department)
async def get_department(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.desired_department = answer
    update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏\n'
                         '–ù–∞–ø—Ä–∏–º–µ—Ä: Python, Postgresql, Git, FastAPI, Django, Go, aiogramm, asyncio',
                         reply_markup=ReplyKeyboardRemove())
    await StartState.goals.set()


@dp.message_handler(state=StartState.decision_about_design)
async def decision_about_design(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    if answer == button.YES:
        user.desired_department = 'Design'
        update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –Ω–∞ –±–µ—Ö–∞–Ω—Å üåê', reply_markup=ReplyKeyboardRemove())
        await StartState.get_skills.set()
    elif answer == button.NO:
        await message.answer('–í –∫–∞–∫–æ–π –±—ã –æ—Ç–¥–µ–ª –í—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ø–∞—Å—Ç—å?',
                             reply_markup=DepartmentsKeyboard.KEYBOARD)
        await StartState.department.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.decision_about_design.set()


@dp.message_handler(state=StartState.get_skills)
async def get_skills(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.behance = answer
    update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏\n'
                         '–ù–∞–ø—Ä–∏–º–µ—Ä: Python, Postgresql, Git, FastAPI, Django, Go, aiogramm, asyncio')
    await StartState.goals.set()


@dp.message_handler(state=StartState.goals)
async def get_goals(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.skills = answer
    update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏\n'
                         '1. –û—Å–Ω–æ–≤–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç —à–∫–æ–ª—ã: ...\n2. –í–µ–∫—Ç–æ—Ä, –∫—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è:')
    await StartState.finish_questions.set()


@dp.message_handler(state=StartState.finish_questions)
async def finish_questions(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.goals = answer
    update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∫–∞ –µ–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω',
                         reply_markup=CheckAccessKeyboard.KEYBOARD)
    await StartState.check_questionnaire.set()


@dp.message_handler(state=StartState.check_questionnaire)
async def check_questionnaire(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == button.CHECK_ACCESS:
        user = get_user_by_tg_login(f'@{message.from_user.username}')
        if user.is_approved:
            await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º', reply_markup=ReplyKeyboardRemove())
            await state.finish()
        else:
            await message.answer('–ü–æ–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–æ',
                                 reply_markup=CheckAccessKeyboard.KEYBOARD)
            await StartState.check_questionnaire.set()
    elif answer == 'iammoder':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞', reply_markup=ReplyKeyboardRemove())
        await StartState.get_moder.set()
    else:
        await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                             reply_markup=CheckAccessKeyboard.KEYBOARD)
        await StartState.check_questionnaire.set()


@dp.message_handler(state=StartState.get_moder)
async def get_moder(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == settings.SECRET_KEY:
        update_user_status(message.from_user.id)
        await message.answer('–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã', reply_markup=ReplyKeyboardRemove())
        await state.finish()
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞')
        await StartState.check_questionnaire.set()
