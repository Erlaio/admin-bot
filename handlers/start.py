import os.path
from pathlib import PurePath
import time

from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import ReplyKeyboardRemove

from keyboard.default.button_value import ButtonValue as button
from keyboard.default.keyboard import Keyboard
from loader import dp
from pkg.db.models.user import new_user
from pkg.db.user_func import add_new_user, update_user_by_telegram_id
from states.start_state import StartState
from utils.config_utils import ConfigUtils
from utils.context_helper import ContextHelper

from pkg.db.department_func import get_users_from_department


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    text = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã \n–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç "–®–∫–æ–ª–∞ IT". –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç' \
           '–ø—Ä–æ—á–µ—Å—Ç—å –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –Ω–∏–º–∏ :)'
    await message.answer(text, reply_markup=Keyboard.CHOICE)
    await StartState.rules.set()


@dp.message_handler(state=StartState.rules)
async def reading_rules(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == button.READ_RULES:
        await message.answer('–¢—É—Ç –≥–æ–≤–æ—Ä–∏—Ç—Å—è –æ –ø—Ä–∞–≤–∏–ª–∞—Ö.', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏?', reply_markup=Keyboard.AGREEMENT)
        await StartState.decision.set()
    elif answer == button.DONT_READ_RULES:
        await message.answer('–û—á–µ–Ω—å –∂–∞–ª—å —á—Ç–æ –Ω–∞—à–µ —Å —Ç–æ–±–æ–π –æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É üòî\n–ï—Å–ª–∏ –∂–µ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å,'
                             '—Ç–æ —è –≤—Å–µ–≥–¥–∞ —Ç—É—Ç)) –ù—É–∂–Ω–æ –ª–∏—à—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start',
                             reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.rules.set()


@dp.message_handler(state=StartState.decision)
async def decision_about_rules(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == button.AGREE_WITH_RULES:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û üñä', reply_markup=ReplyKeyboardRemove())
        await StartState.gender.set()
    elif answer == button.DONT_AGREE_WITH_RULES:
        await message.answer('–ñ–∞–ª—å, —á—Ç–æ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–∏ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞ üòî\n–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –º–æ–∂–µ—Ç–µ'
                             '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start', reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.decision.set()


@dp.message_handler(state=StartState.gender)
async def get_user_gender(message: types.Message, state: FSMContext):
    answer = message.text
    splitted_full_name = answer.split(" ")
    user = new_user()
    user.telegram_id = message.from_user.id
    user.tg_login = f"@{message.from_user.username}"
    user.surname = splitted_full_name[0]
    try:
        user.name = splitted_full_name[1]
    except IndexError:
        user.name = ""
    try:
        user.patronymic = splitted_full_name[2]
    except IndexError:
        user.patronymic = ""
    add_new_user(user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª', reply_markup=Keyboard.GENDER)
    await StartState.photo.set()


@dp.message_handler(state=StartState.photo)
async def ask_about_photo(message: types.Message, state: FSMContext):
    answer = message.text
    message_text = '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–µ —Ñ–æ—Ç–æ?'
    reply_markup = Keyboard.PHOTO
    user = await ContextHelper.get_user(state)
    if answer == button.MALE_GENDER:
        user.gender = "–ú—É–∂—Å–∫–æ–π"
        update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer(message_text, reply_markup=reply_markup)
        await StartState.decision_about_photo.set()
    elif answer == button.FEMALE_GENDER:
        user.gender = "–ñ–µ–Ω—Å–∫–∏–π"
        update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer(message_text, reply_markup=reply_markup)
        await StartState.decision_about_photo.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.photo.set()


@dp.message_handler(state=StartState.decision_about_photo)
async def decision_about_photo(message: types.Message):
    answer = message.text
    if answer == button.WANT_UPLOAD_PHOTO:
        await message.answer('–°—É–ø–µ—Ä! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ.', reply_markup=ReplyKeyboardRemove())
        await StartState.upload_photo.set()
    elif answer == button.DONT_WANT_UPLOAD_PHOTO:
        await message.answer('–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üìù', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É üìß')
        await StartState.gitlab.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.decision_about_photo.set()


@dp.message_handler(state=StartState.upload_photo, content_types=["photo"])
async def upload_photo(message: types.Message, state: FSMContext):
    timestamp = str(time.time()).replace(".", "")
    file_name = f"photo_{timestamp}.jpg"
    file_path = str(PurePath(ConfigUtils.get_project_root(), "temp", file_name))
    user = await ContextHelper.get_user(state)
    await message.photo[-1].download(destination_file=file_path)
    with open(file_path, 'rb') as file:
        user.photo = file.read()
        update_user_by_telegram_id(message.from_user.id, user)
    if os.path.exists(file_path):
        os.remove(file_path)
    await ContextHelper.add_user(user, state)
    await message.answer('–°–ø–∞—Å–∏–±–æ!')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É üìß')
    await StartState.gitlab.set()


@dp.message_handler(state=StartState.gitlab)
async def get_gitlab(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.email = answer
    update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –Ω–∞ gitlab üåê')
    await StartState.design.set()


@dp.message_handler(state=StartState.design)
async def design(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.git = answer
    update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í—ã –¥–∏–∑–∞–π–Ω–µ—Ä? üé®', reply_markup=Keyboard.UNIVERSAL_CHOICE)
    await StartState.decision_about_design.set()


@dp.message_handler(state=StartState.decision_about_design)
async def decision_about_design(message: types.Message):
    answer = message.text
    if answer == button.YES:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –Ω–∞ –±–µ—Ö–∞–Ω—Å üåê', reply_markup=ReplyKeyboardRemove())
        await StartState.get_skills.set()
    elif answer == button.NO:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏\n–¢—É—Ç –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å '
                             '—à–∞–±–ª–æ–Ω', reply_markup=ReplyKeyboardRemove())
        await StartState.goals.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.decision_about_design.set()


@dp.message_handler(state=StartState.get_skills)
async def get_skills(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.behance = answer
    update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏\n–¢—É—Ç –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω')
    await StartState.goals.set()


@dp.message_handler(state=StartState.goals)
async def get_goals(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.skills = answer
    update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏\n–¢—É—Ç –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω')
    await StartState.finish_questions.set()


@dp.message_handler(state=StartState.finish_questions)
async def finish_questions(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.goals = answer
    update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∫–∞ –µ–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω',
                         reply_markup=Keyboard.CHECK_ACCESS)
    await StartState.check_questionnaire.set()


@dp.message_handler(state=StartState.check_questionnaire)
async def check_questionnaire(message: types.Message):
    answer = message.text
    if answer == button.CHECK_ACCESS:
        pass
    else:
        await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ')
        await StartState.departments.set()


@dp.message_handler(state=StartState.departments)
async def output_users_by_department(message: types.Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è –≤—ã–≤–æ–¥–∞', reply_markup=Keyboard.DEPARTMENTS)
    answer = message.text
    if answer == button.FRONTEND:
        data = get_users_from_department(1)
    elif answer == button.BACKEND:
        data = get_users_from_department(2)
    elif answer == button.ML:
        data = get_users_from_department(3)
    elif answer == button.DS:
        data = get_users_from_department(4)
    elif answer == button.DESIGN:
        data = get_users_from_department(5)
    elif answer == button.MOBILE_DEVELOPMENT:
        data = get_users_from_department(6)
    for field in data:                          # –ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —ç—Ç–æ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –í–¥—Ä—É–≥ –ø–æ—è–≤—è—Ç—Å—è –∏–¥–µ–∏
        await message.answer(
            f"ID: {field[0]}\n"
            f"–§–∞–º–∏–ª–∏—è: {field[1]}\n"
            f"–ò–º—è: {field[2]}\n"
            f"–û—Ç—á–µ—Å—Ç–≤–æ: {field[3]}\n"
            f"–ü–æ–ª: {field[4]}\n"
            # f"–§–æ—Ç–æ: {field[5]}\n"
            f"–ü–æ—á—Ç–∞: {field[6]}\n"
            f"–ì–∏—Ç: {field[7]}\n"
            f"–¢–µ–ª–µ–≥—Ä–∞–º: {field[8]}\n"
            f"–ñ–µ–ª–∞–µ–º—ã–π –æ—Ç–¥–µ–ª: {field[9]}\n"
            f"–°–∫–∏–ª—ã: {field[10]}\n"
            f"–¶–µ–ª–∏: {field[11]}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ –ª–∏–¥–∞: {field[12]}\n"
            f"–í—Ä–µ–º—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {field[13]}\n"
            f"–Ø–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: {field[14]}\n"
            f"–ü—Ä–∏–Ω—è—Ç: {field[15]}",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        pass            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å TypeError

