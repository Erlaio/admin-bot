import imghdr
import os.path
import time

from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart, Text
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import ReplyKeyboardRemove, ContentType
from pydantic.error_wrappers import ValidationError

from handlers.rules import RULES
from keyboard.default.inline_keyboards import ModeratorInlineKeyboard
from keyboard.default.keyboards import *
from loader import dp, bot
from pkg.db.user_func import *
from pkg.settings import settings
from states.start_state import StartState
from utils.config_utils import ConfigUtils
from utils.context_helper import ContextHelper
from utils.get_name import split_fullname
from utils.send_card import send_card
from utils.delete_user import delete_user


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    text = '–ü—Ä–∏–≤–µ—Ç! ' \
           '–†–∞–¥—ã —Ç–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –®–∫–æ–ª–µ IT! ' \
           '\n–®–∫–æ–ª–∞ IT Terra —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–º–æ—â–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Ñ–æ–Ω–¥–∞–º –∏ –ª—é–¥—è–º.' \
           ' –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤–Ω–æ—Å–∏—Ç –≤–∫–ª–∞–¥ –≤ –æ–±—â–µ–µ –¥–µ–ª–æ. ' \
           '–®–∫–æ–ª–∞ ‚Äì —ç—Ç–æ –∫–æ–º—å—é–Ω–∏—Ç–∏, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –≤—Å–µ–º –∂–µ–ª–∞—é—â–∏–º. –ú—ã —É—á–∏–º—Å—è –Ω–æ–≤–æ–º—É –∏ –≤—Å–µ–≥–¥–∞ ' \
           '–≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –≤–æ–∑–Ω–∏–∫—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.  ' \
           '\n–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–ª–∏—Å—å —Å–∞–º—ã–µ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ, —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–µ –∏ –ø—Ä–∏–≤–µ—Ç–ª–∏–≤—ã–µ –ª—é–¥–∏.' \
           ' –ú—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤–∏—á–∫–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –Ω–µ —Ç–æ–ª—å–∫–æ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏, –Ω–æ –∏ —Å—Ç—Ä–∞–Ω. ' \
           '\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –®–∫–æ–ª—É –ø—Ä–æ—Å–∏–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤‚Ä¶'
    await message.answer(text, reply_markup=ChoiceKeyboard.get_reply_keyboard())
    await StartState.rules.set()


@dp.message_handler(commands='stop', state='*')
@dp.message_handler(Text(equals=ButtonFactory.get_stop_message()), state='*')
async def bot_stop(message: types.Message, state: FSMContext):
    text = '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'
    await message.answer(text, reply_markup=types.ReplyKeyboardRemove())
    await state.finish()


@dp.message_handler(commands='iammoder')
async def get_moder(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞', reply_markup=StopBotKeyboard.get_reply_keyboard())
    await StartState.get_moder.set()


@dp.message_handler(state=StartState.rules_for_refilling)
async def get_rules(message: types.Message):
    text = '–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É, –Ω–∞–ø–æ–º–Ω–∏–º –ø—Ä–∞–≤–∏–ª–∞ :)'
    await message.answer(text, reply_markup=ChoiceKeyboard.get_reply_keyboard())
    await StartState.rules.set()


@dp.message_handler(state=StartState.rules)
async def reading_rules(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == ChoiceKeyboard.B_READ_RULES:
        await message.answer(RULES, reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏?', reply_markup=AgreementKeyboard.get_reply_keyboard())
        await StartState.decision.set()
    elif answer == ChoiceKeyboard.A_DONT_READ_RULES:
        await message.answer(
            '–û—á–µ–Ω—å –∂–∞–ª—å —á—Ç–æ –Ω–∞—à–µ —Å —Ç–æ–±–æ–π –æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É üòî\n–ï—Å–ª–∏ –∂–µ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å,'
            '—Ç–æ —è –≤—Å–µ–≥–¥–∞ —Ç—É—Ç)) –ù—É–∂–Ω–æ –ª–∏—à—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start',
            reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.rules.set()


@dp.message_handler(state=StartState.decision)
async def decision_about_rules(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == AgreementKeyboard.B_AGREE_WITH_RULES:
        if await get_user_by_tg_id(tg_id=message.from_user.id) is None:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û üñä',
                                 reply_markup=StopBotKeyboard.get_reply_keyboard())
            await StartState.gender.set()
        else:
            await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?',
                                 reply_markup=YesNoKeyboard.get_reply_keyboard())
            await StartState.update_info.set()
    elif answer == AgreementKeyboard.A_DONT_AGREE_WITH_RULES:
        await message.answer('–ñ–∞–ª—å, —á—Ç–æ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–∏ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞ üòî\n'
                             '–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –º–æ–∂–µ—Ç–µ'
                             '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
                             reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.decision.set()


@dp.message_handler(state=StartState.update_info)
async def update_info(message: types.Message):
    answer = message.text
    if answer == YesNoKeyboard.B_YES:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û üñä',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
        tg_id = message.from_user.id
        await delete_user_by_tg_id(telegram_id=tg_id)
        await StartState.gender.set()
    elif answer == YesNoKeyboard.A_NO:
        await message.answer('–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –í–∞—à—É –∞–Ω–∫–µ—Ç—É?',
                             reply_markup=YesNoKeyboard.get_reply_keyboard())
        await StartState.choice.set()


@dp.message_handler(state=StartState.choice)
async def questionnaire_choice(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == YesNoKeyboard.B_YES:
        await message.answer('–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                             reply_markup=CheckAccessKeyboard.get_reply_keyboard(add_stop=False))
        await StartState.check_questionnaire.set()
    elif answer == YesNoKeyboard.A_NO:
        await message.answer('–û–∫. –í–æ–∑–≤—Ä–∞—â–∞—é –í–∞—Å –≤ –Ω–∞—á–∞–ª–æ',
                             reply_markup=ReplyKeyboardRemove())
        await state.reset_state()


@dp.message_handler(state=StartState.gender)
async def get_user_gender(message: types.Message, state: FSMContext):
    answer = message.text
    surname, name, patronymic = split_fullname(answer)
    if name.isalpha():
        user = User()
        user.telegram_id = message.from_user.id
        user.tg_login = f'@{message.from_user.username}'
        user.surname, user.name, user.patronymic = surname, name, patronymic
        await add_new_user(user)
        await ContextHelper.add_user(user, state)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª',
                             reply_markup=GenderKeyboard.get_reply_keyboard())
        await StartState.photo.set()
    else:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –§–ò–û\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n'
                             '–ú–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–æ\n–ò–º—è —É–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.')
        await StartState.gender.set()


@dp.message_handler(state=StartState.photo)
async def ask_about_photo(message: types.Message, state: FSMContext):
    answer = message.text
    message_text = '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–µ —Ñ–æ—Ç–æ?'
    user = await ContextHelper.get_user(state)
    if answer == GenderKeyboard.B_MALE_GENDER:
        user.gender = '–ú—É–∂—Å–∫–æ–π'
    elif answer == GenderKeyboard.A_FEMALE_GENDER:
        user.gender = '–ñ–µ–Ω—Å–∫–∏–π'
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.photo.set()
        return
    await update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer(message_text,
                         reply_markup=PhotoKeyboard.get_reply_keyboard())
    await StartState.decision_about_photo.set()


@dp.message_handler(state=StartState.decision_about_photo)
async def decision_about_photo(message: types.Message):
    answer = message.text
    if answer == PhotoKeyboard.B_WANT_UPLOAD_PHOTO:
        await message.answer('–°—É–ø–µ—Ä! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ.',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
        await StartState.upload_photo.set()
    elif answer == PhotoKeyboard.A_DONT_WANT_UPLOAD_PHOTO:
        await message.answer('–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üìù',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É üìß')
        await StartState.gitlab.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.decision_about_photo.set()


@dp.message_handler(state=StartState.upload_photo,
                    content_types=[ContentType.PHOTO, ContentType.DOCUMENT])
async def upload_photo(message: types.Message, state: FSMContext):
    timestamp = str(time.time()).replace('.', '')
    file_name = f'photo_{timestamp}.jpg'
    file_path = os.path.join(ConfigUtils.get_temp_path(), file_name)
    user = await ContextHelper.get_user(state)
    if not message.content_type == 'photo':
        file = await bot.get_file(message.document.file_id)
        await bot.download_file(file.file_path, file_path)
    else:
        await message.photo[-1].download(destination_file=file_path)
    with open(file_path, 'rb') as file:
        if not imghdr.what(file):
            await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.', reply_markup=StopBotKeyboard.get_reply_keyboard())
            await StartState.upload_photo.set()
        else:
            user.photo = file.read()
            await update_user_by_telegram_id(message.from_user.id, user)
            await ContextHelper.add_user(user, state)
            await message.answer('–°–ø–∞—Å–∏–±–æ!')
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É üìß', reply_markup=StopBotKeyboard.get_reply_keyboard())
            await StartState.gitlab.set()
    if os.path.exists(file_path):
        os.remove(file_path)


@dp.message_handler(state=StartState.gitlab)
async def get_gitlab(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.email = answer
    await update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –Ω–∞ gitlab üåê',
                         reply_markup=StopBotKeyboard.get_reply_keyboard())
    await StartState.design.set()


@dp.message_handler(state=StartState.design)
async def design(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.git = answer
    await update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í—ã –¥–∏–∑–∞–π–Ω–µ—Ä? üé®', reply_markup=YesNoKeyboard.get_reply_keyboard())
    await StartState.decision_about_design.set()


@dp.message_handler(state=StartState.department)
async def get_department(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.desired_department = answer
    await update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏\n'
                         '–ù–∞–ø—Ä–∏–º–µ—Ä: Python, Postgresql, Git, FastAPI, Django, '
                         'Go, aiogramm, asyncio',
                         reply_markup=StopBotKeyboard.get_reply_keyboard())
    await StartState.goals.set()


@dp.message_handler(state=StartState.decision_about_design)
async def decision_about_design(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    if answer == YesNoKeyboard.B_YES:
        user.desired_department = 'Design'
        await update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –Ω–∞ –±–µ—Ö–∞–Ω—Å üåê',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
        await StartState.get_skills.set()
    elif answer == YesNoKeyboard.A_NO:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫–æ–π –±—ã –æ—Ç–¥–µ–ª –í—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ø–∞—Å—Ç—å?',
                             reply_markup=await DepartmentsKeyboard.get_reply_keyboard())
        await StartState.department.set()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.decision_about_design.set()


@dp.message_handler(state=StartState.get_skills)
async def get_skills(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.behance = answer
    await update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏\n'
                         '–ù–∞–ø—Ä–∏–º–µ—Ä: Python, Postgresql, Git, FastAPI, '
                         'Django, Go, aiogramm, asyncio', reply_markup=StopBotKeyboard.get_reply_keyboard())
    await StartState.goals.set()


@dp.message_handler(state=StartState.goals)
async def get_goals(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.skills = answer
    await update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏\n'
                         '1. –û—Å–Ω–æ–≤–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç —à–∫–æ–ª—ã: ...\n2. '
                         '–í–µ–∫—Ç–æ—Ä, –∫—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è:',
                         reply_markup=StopBotKeyboard.get_reply_keyboard())
    await StartState.finish_questions.set()


@dp.message_handler(state=StartState.finish_questions)
async def finish_questions(message: types.Message, state: FSMContext):
    answer = message.text
    user = await ContextHelper.get_user(state)
    user.goals = answer
    await update_user_by_telegram_id(message.from_user.id, user)
    await ContextHelper.add_user(user, state)
    await message.answer('–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. '
                         '–ü–æ–∫–∞ –µ–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω',
                         reply_markup=CheckAccessKeyboard.get_reply_keyboard(add_stop=False))
    # moder_chat_id = await ModeratorUtils().get_random_moder()         # —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–¥–µ—Ä—É –≤ –ª–∏—á–∫—É
    await bot.send_message(chat_id=settings.TELEGRAM_MODERS_CHAT_ID, text=f'–ü—Ä–∏—à–ª–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ {user.tg_login}')
    await send_card(chat_id=settings.TELEGRAM_MODERS_CHAT_ID, user=user,
                    reply_markup=ModeratorInlineKeyboard(
                        page=0,
                        telegram_id=user.telegram_id,
                        user_name=user.tg_login
                    ).get_inline_keyboard())
    await StartState.check_questionnaire.set()


@dp.message_handler(state=StartState.check_questionnaire)
async def check_questionnaire(message: types.Message):
    # channels = settings.TELEGRAM_SCHOOL_CHATS
    answer = message.text
    if answer == CheckAccessKeyboard.A_CHECK_ACCESS:
        try:
            user = await get_user_by_tg_login(f'@{message.from_user.username}')
            if user.is_approved:
                # formatted_channels = ' '.join(map(str, channels))
                text = '–ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤–æ –≤—Å–µ ' \
                       '—Å–ª–µ–¥—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –¥–Ω–µ–π:\n{}\n'. \
                    format('–®–∫–æ–ª–∞ IT:\nhttps://t.me/+qGGF9z5Jy8MwMDA8'
                           '\n\n–ü—Ä–æ–µ–∫—Ç—ã:\nhttps://t.me/+HwhF6emf-asxYmMy')
                await message.answer(text,
                                     reply_markup=JoinedKeyboard.get_reply_keyboard(add_stop=False))
                await StartState.check_membership.set()
            else:
                await message.answer('–ü–æ–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–æ',
                                     reply_markup=CheckAccessKeyboard.get_reply_keyboard(add_stop=False))
        except ValidationError:
            await bot.send_message(chat_id=message.chat.id,
                                   text='–ù–µ–≤–µ—Ä–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ')
            moder = await get_random_moder()
            await send_card(message.chat.id, moder)
            await bot.send_message(chat_id=message.chat.id,
                                   text='–î–ª—è –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                                   reply_markup=MoveToRefilling.get_reply_keyboard(add_stop=False))
            await StartState.rules_for_refilling.set()
    else:
        await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                             reply_markup=CheckAccessKeyboard.get_reply_keyboard(add_stop=False))
        await StartState.check_questionnaire.set()


@dp.message_handler(state=StartState.check_membership)
async def check_membership(message: types.Message, state: FSMContext):
    is_member = True
    channels = settings.TELEGRAM_SCHOOL_CHATS
    is_first_check = True
    user_id = message.from_user.id

    while True:
        for channel in channels:
            user_status = await bot.get_chat_member(chat_id=channel, user_id=user_id)
            if user_status.status == 'kicked':
                await message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ–¥–Ω–æ–º –∏–∑ –Ω–∞—à–∏—Ö —á–∞—Ç–æ–≤. '
                                     '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–∏–º–ª–∏–¥—É –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É',
                                     reply_markup=ReplyKeyboardRemove())
                await delete_user(user_id, channels)
                await state.finish()
                return
            elif user_status.status == 'left':
                is_member = False
                if is_first_check:
                    await message.answer('–ü—Ä–æ—à–ª–∏ —É–∂–µ —Å—É—Ç–∫–∏! –ï—Å–ª–∏ –í—ã –Ω–µ –≤—Å—Ç—É–ø–∏—Ç–µ '
                                         '–≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—É—Ç–æ–∫, –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞',
                                         reply_markup=ReplyKeyboardRemove())
                    is_first_check = False
                    await asyncio.sleep(86_400)
                    break
                else:
                    await message.answer('–ñ–∞–ª—å, –Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–∞–º —Ä–∞—Å—Å—Ç–∞—Ç—å—Å—è. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è',
                                         reply_markup=ReplyKeyboardRemove())
                    await delete_user(user_id, channels)
                    await StartState.cycle.set()
                    return
        if is_member:
            await message.answer('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏!', reply_markup=ReplyKeyboardRemove())
            await state.finish()
            return


@dp.message_handler(state=StartState.get_moder)
async def get_moder(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == settings.SECRET_KEY:
        await update_user_status(message.from_user.id)
        await message.answer('–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã',
                             reply_markup=CheckAccessKeyboard.get_reply_keyboard(add_stop=False))
        await state.finish()
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞')
        await StartState.check_questionnaire.set()


@dp.message_handler(state=StartState.cycle)
async def cycle(message: types.Message):
    await StartState.cycle.set()
